
#1. SQL Query to Create employees Table with Constraints
CREATE database Employess_Data;
use Employess_Data;
CREATE TABLE employees (
    emp_id INT NOT NULL PRIMARY KEY,
    emp_name VARCHAR(100) NOT NULL,
    age INT CHECK (age >= 18),
    email VARCHAR(100) UNIQUE,
    salary DECIMAL(10, 2) DEFAULT 30000.00
);

/*2. Explain the purpose of constraints and how they help maintain data integrity in a database. Provide
examples of common types of constraints.

ANSWRE --  Constraints are rules used in SQL to maintain the accuracy, reliability, and integrity of the data in a database. They help ensure that only valid and consistent data is stored in the tables.

Purpose of constraints:

Prevents invalid or missing data (e.g., empty names or duplicate IDs).

Enforces business rules automatically (e.g., age should be ≥ 18).

Protects relationships between tables (using foreign keys).

Common types of constraints:

PRIMARY KEY – Uniquely identifies each row (e.g., emp_id).

NOT NULL – Ensures a column cannot have NULL values.

UNIQUE – Makes sure all values in a column are different.

CHECK – Validates values based on a condition (e.g., age ≥ 18).

DEFAULT – Assigns a default value when none is provided.

FOREIGN KEY – Ensures referential integrity between two tables.

3.Why would you apply the NOT NULL constraint to a column? Can a primary key contain NULL values? Justify
your answer

ANSWER -- We use the NOT NULL constraint to make sure that a column must always have a value. This prevents important information like names or IDs from being left empty.

A primary key cannot contain NULL values, because:

A primary key must uniquely identify each row in the table.

NULL means “unknown”, and unknown values cannot guarantee uniqueness.

So, by default, a primary key is both NOT NULL and UNIQUE.

4. Explain the steps and SQL commands used to add or remove constraints on an existing table. Provide an
example for both adding and removing a constraint.

ANSWER -- We use the ALTER TABLE statement to add or remove constraints.

To add a constraint (e.g., UNIQUE on email):

ALTER TABLE employees
ADD CONSTRAINT unique_email UNIQUE (email);


To remove a constraint (MySQL syntax for UNIQUE):

ALTER TABLE employees
DROP INDEX unique_email;

 */
 
 # 6. You created a products table without constraints as follows:
 
 CREATE TABLE products (
    product_id INT,
    product_name VARCHAR(50),
    price DECIMAL(10, 2)
);

#Now, add the necessary constraints using ALTER TABLE:

#Make product_id the primary key:

ALTER TABLE products
ADD CONSTRAINT pk_product_id PRIMARY KEY (product_id);

#Set a default value for price:

ALTER TABLE products
MODIFY price DECIMAL(10,2) DEFAULT 50.00;

# Question 7
# 7. You have two tables:
#Write a query to fetch the student_name and class_name for each student using an INNER JOIN.

# table

CREATE TABLE Students (
    student_id INT,
    student_name VARCHAR(50),
    class_id INT
);

CREATE TABLE Classes (
    class_id INT,
    class_name VARCHAR(50)
);

# insert data into table

-- Insert into Students table
INSERT INTO Students (student_id, student_name, class_id) VALUES
(1, 'Alice', 101),
(2, 'Bob', 102),
(3, 'Charlie', 101);

-- Insert into Classes table
INSERT INTO Classes (class_id, class_name) VALUES
(101, 'Math'),
(102, 'Science'),
(103, 'History');

# inner join query

SELECT 
    s.student_name,
    c.class_name
FROM 
    Students s
INNER JOIN 
    Classes c ON s.class_id = c.class_id;

# 8. Consider the following three tables:

/*Write a query that shows all order_id, customer_name, and product_name, ensuring that all products are
listed even if they are not associated with an order */

# create the table

CREATE TABLE Orders (
    order_id INT,
    order_date DATE,
    customer_id INT
);

CREATE TABLE Customers (
    customer_id INT,
    customer_name VARCHAR(50)
);

CREATE TABLE Products_1 (
    product_id INT,
    product_name VARCHAR(50),
    order_id INT
);

# insert data

-- Insert into Orders
INSERT INTO Orders (order_id, order_date, customer_id) VALUES
(1, '2024-01-01', 101),
(2, '2024-01-03', 102);

-- Insert into Customers
INSERT INTO Customers (customer_id, customer_name) VALUES
(101, 'Alice'),
(102, 'Bob');

-- Insert into Products
INSERT INTO Products_1 (product_id, product_name, order_id) VALUES
(1, 'Laptop', 1),
(2, 'Phone', NULL);

SELECT 
    o.order_id,
    c.customer_name,
    p.product_name
FROM 
    Products_1 p
LEFT JOIN 
    Orders o ON p.order_id = o.order_id
LEFT JOIN 
    Customers c ON o.customer_id = c.customer_id;

# 9. Given the following tables:
# Write a query to find the total sales amount for each product using an INNER JOIN and the SUM() function.


CREATE TABLE Sales (
    sale_id INT,
    product_id INT,
    amount INT
);

CREATE TABLE Products2 (
    product_id INT,
    product_name VARCHAR(50)
);

# insert data

-- Insert into Sales
INSERT INTO Sales (sale_id, product_id, amount) VALUES
(1, 101, 500),
(2, 102, 300),
(3, 101, 700);

-- Insert into Products
INSERT INTO Products2 (product_id, product_name) VALUES
(101, 'Laptop'),
(102, 'Phone');

# join, sum

SELECT 
    p.product_name,
    SUM(s.amount) AS total_sales
FROM 
    Sales s
INNER JOIN 
    Products2 p ON s.product_id = p.product_id
GROUP BY 
    p.product_name;
    
    
#  10. You are given three tables:

/*Write a query to display the order_id, customer_name, and the quantity of products ordered by each
customer using an INNER JOIN between all three tables.*/


-- Creating the Orders table
CREATE TABLE Orders1 (
    order_id INT,
    order_date DATE,
    customer_id INT
);

-- Creating the Customers table
CREATE TABLE Customers1 (
    customer_id INT,
    customer_name VARCHAR(50)
);

-- Creating the Order_Details table
CREATE TABLE Order_Details (
    order_id INT,
    product_id INT,
    quantity INT
);

#insert data

-- Inserting data into Orders
INSERT INTO Orders1 VALUES (1, '2024-01-02', 1);
INSERT INTO Orders1 VALUES (2, '2024-01-05', 2);

-- Inserting data into Customers
INSERT INTO Customers1 VALUES (1, 'Alice');
INSERT INTO Customers1 VALUES (2, 'Bob');

-- Inserting data into Order_Details
INSERT INTO Order_Details VALUES (1, 101, 2);
INSERT INTO Order_Details VALUES (1, 102, 1);
INSERT INTO Order_Details VALUES (2, 101, 3);

SELECT 
    o.order_id,
    c.customer_name,
    od.quantity
FROM Orders1 o
INNER JOIN Customers1 c ON o.customer_id = c.customer_id
INNER JOIN Order_Details od ON o.order_id = od.order_id;


# SQL COMMANDS

use mavenmovies;

select * from actor;

select * from customer;

select * from country;

SELECT first_name, last_name
FROM customer
WHERE active = 1;

select customer_id, rental_id
 from rental
 where customer_id = 1;
 
select title, rental_duration
from film
where rental_duration > 5;

select title, replacement_cost 
from film
where replacement_cost between 15 and 20;

select * from film_actor;
select COUNT(distinct first_name)as unique_first_name from actor_info;

select * from customer 
order by customer_id asc
limit 10;

select * from customer 
where first_name like "B%"
order by customer_id asc
limit 3;

select film_id, title, rating from film
where rating = "G"
order by film_id asc
limit 5;

select first_name from customer
where first_name like "A%";

select first_name from customer
where first_name like "%A";

select city_id , city from city
where city like "a%a"
order by city_id asc
limit 4;

select first_name, last_name from customer where first_name like "%ni%";

select first_name from customer where first_name like "_r%";

select first_name from customer where first_name like "a%" and length(first_name) >= 5;

select first_name from customer
where first_name like "a%o"; 

SELECT * 
FROM film
WHERE rating IN ('PG', 'PG-13');

SELECT * 
FROM film
WHERE length BETWEEN 50 AND 100;

SELECT first_name, last_name 
FROM actor
LIMIT 50;

SELECT DISTINCT film_id 
FROM inventory;

use sakila;
show tables;
# 1 Retrieve the total number of rentals made in the Sakila database.
select count(*) as total_rentals
from rental;

# 2.Find the average rental duration (in days) of movies rented from the Sakila database.
select avg(rental_duration) as average_rental_duration
from film;

# 3. Display the first name and last name of customers in uppercase.
select upper(first_name) as first_name,
upper(last_name) as last_name
from customer
limit 5;

# 4 Extract the month from the rental date and display it alongside the rental ID.
select  rental_id, rental_date, month(rental_date) as rental_month, time(rental_date) as rental_time 
from rental;

# 5. Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
select customer_id, count(*) as rental_count
from rental
group by customer_id;

# 6. Find the total revenue generated by each store.
select c.store_id, sum(p.amount) as store_revenue
from payment p
join customer as c on p.customer_id = c.customer_id
group by c.store_id;

# 7. Determine the total number of rentals for each category of movies.
select c.name as category , count(r.rental_id) as total_rentals
from rental r
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
group by c.name;

# 8.Find the average rental rate of movies in each language.
select l.name as language, avg(f.rental_rate) as avg_rental_rate
from film f 
join language l on f.language_id = l.language_id
group by l.name;

#join

# 9. Display the title of the movie, customer s first name, and last name who rented it.
SELECT 
    f.title AS movie_title,
    c.first_name,
    c.last_name
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id         -- join between film and inventory
INNER JOIN rental r ON i.inventory_id = r.inventory_id  -- join between inventory and rental
INNER JOIN customer c ON r.customer_id = c.customer_id; -- join between rental and customer

# 10.Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
SELECT 
    a.first_name,
    a.last_name,
    f.title
FROM film f
JOIN film_actor fa ON f.film_id = fa.film_id        -- join between film and film_actor
JOIN actor a ON fa.actor_id = a.actor_id            -- join between film_actor and actor
WHERE f.title = 'Gone with the Wind.';	


# 11.Retrieve the customer names along with the total amount they've spent on rentals.
select 
	c.first_name,
    c.last_name,
    sum(p.amount) as Total_Amount_Spend
from customer c
JOIN payment p ON c.customer_id = p.customer_id       -- join between customer and payment
JOIN rental r ON p.rental_id = r.rental_id            -- join between payment and rental
GROUP BY c.customer_id, c.first_name, c.last_name;

# 12.List the titles of movies rented by each customer in a particular city (e.g., 'London').
select
	f.title as Movie_Title,
    c.first_name,
    c.last_name
from customer c
join address ad on c.address_id = ad.address_id
join city ci on ad.city_id = ci.city_id
JOIN rental r ON c.customer_id = r.customer_id
join inventory i on r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id 
WHERE ci.city = 'London'
GROUP BY c.customer_id, f.film_id, c.first_name, c.last_name, f.title;


# 13.the top 5 rented movies along with the number of times they've been rented.

#Hint: JOIN film, inventory, and rental tables, then use COUNT () and GROUP BY, and limit the results.

SELECT 
    f.title AS movie_title,
    COUNT(r.rental_id) AS times_rented
FROM film f
JOIN inventory i ON f.film_id = i.film_id              -- join between film and inventory
JOIN rental r ON i.inventory_id = r.inventory_id       -- join between inventory and rental
GROUP BY f.film_id, f.title
ORDER BY times_rented DESC
LIMIT 5;

# 14. Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).

SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT i.store_id) AS store_count
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id          -- join between customer and rental
JOIN inventory i ON r.inventory_id = i.inventory_id     -- join between rental and inventory
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT i.store_id) = 2;                  -- rented from both store 1 and 2


# windows

#1. Rank the customers based on the total amount they've spent on rentals.

select
	c.customer_id,
	c.first_name,
    c.last_name,
    sum(p.amount) as total_rental_amount,
    rank() over (ORDER BY SUM(p.amount) DESC) AS spending_rank
from customer c
join payment p on c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY spending_rank;

#2. Calculate the cumulative revenue generated by each film over time.
select 
	f.film_id,
	f.title,
    p.payment_date, 
	p.amount,
    sum(p.amount) over (partition by f.title ) as cumulative_revenue
from film f
join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
ORDER BY f.title, p.amount, p.payment_date;

# 3. Determine the average rental duration for each film, considering films with similar lengths.

select
	f.film_id,
	f.title,
    f.rental_duration,
    ROUND(AVG(f.rental_duration) OVER (PARTITION BY f.length), 2) AS ARD
from film f
order by f.length;

# 4. Identify the top 3 films in each category based on their rental counts.
SELECT *
FROM (
    SELECT
        c.name AS category_name,
        f.title AS film_title,
        COUNT(r.rental_id) AS rental_count,
        RANK() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS film_rank
    FROM film f
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.name, f.title
) AS ranked_films
WHERE film_rank <= 3
ORDER BY category_name, film_rank;
	
# 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals
# across all customers.

SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_rentals,
    AVG(COUNT(r.rental_id)) OVER () AS avg_rentals,
    COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_difference
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY rental_difference DESC;

# 6. Find the monthly revenue trend for the entire rental store over time.

SELECT
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
    SUM(p.amount) AS monthly_revenue,
    LAG(SUM(p.amount)) OVER (ORDER BY DATE_FORMAT(p.payment_date, '%Y-%m')) AS previous_month_revenue
FROM payment p
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY month;

# 8. Calculate the running total of rentals per category, ordered by rental count.
select
	c.name as Film_Category,
    COUNT(r.rental_id) AS rental_counts,
    p.amount,
    sum(p.amount) over ( partition by c.name order by r.rental_id) AS running_total
from category c
JOIN film_category fc ON c.category_id = fc.category_id
join film f on fc.film_id = f.film_id
join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY  c.name, r.rental_id, p.amount
ORDER BY c.name, r.rental_id;
    
# 9. Find the films that have been rented less than the average rental count for their respective categories.	
SELECT 
    category_name,
    film_title,
    film_rental_count,
    avg_rental_in_category
FROM (
    SELECT 
        c.name AS category_name,
        f.title AS film_title,
        COUNT(r.rental_id) AS film_rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id) AS avg_rental_in_category
    FROM film f
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.category_id, c.name, f.title
) AS sub
WHERE film_rental_count < avg_rental_in_category
ORDER BY category_name, film_rental_count;

# 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT 
    DATE_FORMAT(payment_date, '%Y-%m') AS revenue_month,
    SUM(amount) AS total_revenue
FROM payment
GROUP BY revenue_month
ORDER BY total_revenue DESC
LIMIT 5;
